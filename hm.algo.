/**
 * Класс, представляющий узел бинарного дерева поиска.
 */
class Node {
  /**
   * Создает новый узел.
   * @param key Ключ узла.
   * @param value Значение узла.
   */
  constructor(key, value) {
    this.key = key;
    this.value = value;
    this.left = null;
    this.right = null;
    this.balanceFactor = 0; // Баланс узла
  }
}

/**
 * Класс, представляющий бинарное дерево поиска.
 */
class AVLTree {
  /**
   * Создает новое бинарное дерево поиска.
   */
  constructor() {
    this.root = null;
    this.num_nodes = 0;
  }

  /**
   * Вставляет новый узел в дерево.
   * @param key Ключ нового узла.
   * @param value Значение нового узла.
   */
  insert(key, value) {
    const newNode = new Node(key, value);
    if (this.root === null) {
      this.root = newNode;
    } else {
      this.root = this.insertNode(this.root, newNode);
    }
    this.num_nodes++;
  }

  /**
   * Рекурсивно вставляет новый узел в поддерево.
   * @param node Текущий узел.
   * @param newNode Новый узел.
   */
  insertNode(node, newNode) {
    if (newNode.key < node.key) {
      if (node.left === null) {
        node.left = newNode;
      } else {
        node.left = this.insertNode(node.left, newNode);
      }
    } else if (newNode.key > node.key) {
      if (node.right === null) {
        node.right = newNode;
      } else {
        node.right = this.insertNode(node.right, newNode);
      }
    } else {
      node.value = newNode.value; // Обновляем значение, если ключи одинаковые
      return node;
    }

    // Обновляем баланс после вставки
    node.balanceFactor = this.getHeight(node.left) - this.getHeight(node.right);

    // Балансировка
    return this.balance(node);
  }

  /**
   * Получает высоту узла.
   * @param node Узел.
   * @returns Высота узла.
   */
  getHeight(node) {
    if (node === null) return 0;
    return Math.max(this.getHeight(node.left), this.getHeight(node.right)) + 1;
  }

  /**
   * Балансирует узел.
   * @param node Узел.
   * @returns Балансированный узел.
   */
  balance(node) {
    if (node.balanceFactor > 1) {
      if (node.left.balanceFactor < 0) {
        node.left = this.leftRotate(node.left);
      }
      return this.rightRotate(node);
    }
    if (node.balanceFactor < -1) {
      if (node.right.balanceFactor > 0) {
        node.right = this.rightRotate(node.right);
      }
      return this.leftRotate(node);
    }
    return node;
  }

  /**
   * Левое вращение.
   * @param node Узел.
   * @returns Новый корень после вращения.
   */
  leftRotate(node) {
    const newRoot = node.right;
    node.right = newRoot.left;
    newRoot.left = node;
    node.balanceFactor = this.getHeight(node.left) - this.getHeight(node.right);
    newRoot.balanceFactor =
      this.getHeight(newRoot.left) - this.getHeight(newRoot.right);
    return newRoot;
  }

  /**
   * Правое вращение.
   * @param node Узел.
   * @returns Новый корень после вращения.
   */
  rightRotate(node) {
    const newRoot = node.left;
    node.left = newRoot.right;
    newRoot.right = node;
    node.balanceFactor = this.getHeight(node.left) - this.getHeight(node.right);
    newRoot.balanceFactor =
      this.getHeight(newRoot.left) - this.getHeight(newRoot.right);
    return newRoot;
  }

  /**
   * Ищет значение узла по заданному ключу.
   * @param key Ключ искомого узла.
   * @returns Значение найденного узла или null, если узел не найден.
   */
  search(key) {
    const node = this.searchNode(this.root, key);
    return node ? node.value : null;
  }

  /**
   * Рекурсивно ищет узел с заданным ключом в поддереве.
   * @param node Текущий узел.
   * @param key Ключ искомого узла.
   * @returns Найденный узел или null, если узел не найден.
   */
  searchNode(node, key) {
    if (node === null) {
      return null;
    }

    if (key < node.key) {
      return this.searchNode(node.left, key);
    } else if (key > node.key) {
      return this.searchNode(node.right, key);
    } else {
      return node;
    }
  }

  /**
   * Находит минимальный узел в дереве.
   * @returns Минимальный узел или null, если дерево пустое.
   */
  min() {
    let currentNode = this.root;
    while (currentNode && currentNode.left !== null) {
      currentNode = currentNode.left;
    }
    return currentNode;
  }

  /**
   * Находит максимальный узел в дереве.
   * @returns Максимальный узел или null, если дерево пустое.
   */
  max() {
    let currentNode = this.root;
    while (currentNode && currentNode.right !== null) {
      currentNode = currentNode.right;
    }
    return currentNode;
  }

  length() {
    return this.num_nodes;
  }

  /**
   * Отображает дерево в виде древовидной структуры в терминале.
   */
  displayTree() {
    if (this.root === null) {
      console.log('Дерево пустое.');
      return;
    }

    this.displayNode(this.root, '', true);
  }

  /**
   * Рекурсивно отображает узел и его поддеревья.
   * @param node Текущий узел.
   * @param prefix Префикс для отображения уровня дерева.
   * @param isLeft Флаг, указывающий, является ли узел левым дочерним.
   */
  displayNode(node, prefix, isLeft) {
    if (node !== null) {
      const displayPrefix = prefix + (isLeft ? '├── L:' : '└── R:');
      console.log(displayPrefix + node.key + ':' + node.value);

      const childPrefix = prefix + (isLeft ? '│   ' : '    ');
      if (node.left || node.right) {
        this.displayNode(node.left, childPrefix, true);
        this.displayNode(node.right, childPrefix, false);
      }
    }
  }
}

// Пример использования
const tree = new AVLTree();
tree.insert(3, 'Вася');
tree.insert(1, 'Аня');
tree.insert(5, 'Петя');
tree.insert(2, 'Лена');
tree.insert(4, 'Игорь');

tree.displayTree(); // Отобразить дерево
console.log('Минимум:', tree.min()); // Вывести минимальный узел
console.log('Максимум:', tree.max()); // Вывести максимальный узел
